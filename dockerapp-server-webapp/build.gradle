apply plugin: 'tomcat'
apply plugin: 'war'
war.baseName = 'dockerapp-server'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.gradle.api.plugins:gradle-tomcat-plugin:1.2.3")
    }
}
repositories {
    mavenCentral()
}

tomcatRun {
    contextPath = 'api'
}

dependencies {
    compile project(':dockerapp-server-api')

    compile 'org.quartz-scheduler:quartz:2.2.1'

    runtime project(':dockerapp-server-database')
    runtime project(':dockerapp-plugin-http-client')
    runtime project(':dockerapp-server-runtime')

    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile "org.springframework:spring-webmvc:${versions.springframework}"
    compile "org.springframework:spring-jdbc:${versions.springframework}"
    compile "org.springframework:spring-tx:${versions.springframework}"
    compile 'org.apache.tomcat:tomcat-jdbc:8.0.22'
    compile "mysql:mysql-connector-java:${versions.mysql}"

    providedCompile 'javax.servlet:servlet-api:2.5'

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${versions.tomcat}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${versions.tomcat}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${versions.tomcat}"
}

if (System.properties['environment'] == null) {
    System.properties.environment = System.properties.defaultEnv
}

task integrationTomcatRun(type: org.gradle.api.plugins.tomcat.tasks.TomcatRun) {
    buildscriptClasspath = tomcatRun.buildscriptClasspath
    classesDirectory = sourceSets.main.output.classesDir
    daemon = true
    tomcatClasspath = tomcatRun.tomcatClasspath
    webAppClasspath = tomcatRun.webAppClasspath
    webAppSourceDirectory = tomcatRun.webAppSourceDirectory
    contextPath = 'api'
    httpPort = 8086
}

